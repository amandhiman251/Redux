{"ast":null,"code":"import * as actionTypes from '../actions/actionsTypes';\nimport { updatedObject } from '../utility';\nconst initialState = {\n  results: []\n};\n\nconst resultsReducer = (state = initialState, action) => {\n  const deleteResult = (state, resultElId) => {\n    const updatedArray = state.results.filter(result => {\n      return result.id !== action.resultElId;\n    });\n    return updatedArray;\n  };\n\n  switch (action.type) {\n    case actionTypes.STORE_RESULT:\n      return updatedObject(state, {\n        results: state.results.concat({\n          id: Math.random(),\n          value: action.result\n        })\n      });\n\n    case actionTypes.DELETE_RESULT:\n      return updatedObject(state, deleteResult(resultElId));\n\n    default:\n      return state;\n  }\n};\n\nexport default resultsReducer;","map":{"version":3,"sources":["/Users/bala/Desktop/React Module Independent of BurgerBuilder and Assignments/Redux/src/store/reducers/results.js"],"names":["actionTypes","updatedObject","initialState","results","resultsReducer","state","action","deleteResult","resultElId","updatedArray","filter","result","id","type","STORE_RESULT","concat","Math","random","value","DELETE_RESULT"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,yBAA7B;AACA,SAASC,aAAT,QAA8B,YAA9B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAC;AADS,CAArB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAEzD,QAAMC,YAAY,GAAG,CAACF,KAAD,EAAOG,UAAP,KAAsB;AACvC,UAAMC,YAAY,GAAGJ,KAAK,CAACF,OAAN,CAAcO,MAAd,CAAqBC,MAAM,IAAI;AAChD,aAAQA,MAAM,CAACC,EAAP,KAAcN,MAAM,CAACE,UAA7B;AAAyC,KADxB,CAArB;AAEA,WAAOC,YAAP;AACC,GAJL;;AAMI,UAAOH,MAAM,CAACO,IAAd;AACI,SAAKb,WAAW,CAACc,YAAjB;AACI,aAAOb,aAAa,CAACI,KAAD,EAAQ;AAACF,QAAAA,OAAO,EAAEE,KAAK,CAACF,OAAN,CAAcY,MAAd,CAAqB;AAACH,UAAAA,EAAE,EAAEI,IAAI,CAACC,MAAL,EAAL;AAAoBC,UAAAA,KAAK,EAAEZ,MAAM,CAACK;AAAlC,SAArB;AAAV,OAAR,CAApB;;AACJ,SAAKX,WAAW,CAACmB,aAAjB;AACO,aAAOlB,aAAa,CAACI,KAAD,EAAQE,YAAY,CAACC,UAAD,CAApB,CAApB;;AACC;AACI,aAAOH,KAAP;AANhB;AAQH,CAhBD;;AAkBA,eAAeD,cAAf","sourcesContent":["import * as actionTypes from '../actions/actionsTypes';\nimport { updatedObject } from '../utility';\n\nconst initialState = {\n    results:[]\n}\n\n\nconst resultsReducer = (state = initialState, action) => {\n\nconst deleteResult = (state,resultElId) => {\n    const updatedArray = state.results.filter(result => {\n        return( result.id !== action.resultElId)});\n    return updatedArray;\n    }\n\n    switch(action.type){\n        case actionTypes.STORE_RESULT:\n            return updatedObject(state, {results: state.results.concat({id: Math.random(), value: action.result})});\n        case actionTypes.DELETE_RESULT:\n               return updatedObject(state, deleteResult(resultElId));\n                default:\n                    return state\n    }\n}\n\nexport default resultsReducer;"]},"metadata":{},"sourceType":"module"}