{"version":3,"sources":["components/CounterControl/CounterControl.js","components/CounterOutput/CounterOutput.js","store/actions.js","containers/Counter/Counter.js","App.js","registerServiceWorker.js","store/reducers/counter.js","store/reducers/results.js","index.js"],"names":["counterControl","props","className","onClick","clicked","label","counterOutput","value","INCREMENT","DECREMENT","ADD5","SUBTRACT5","STORE_RESULT","DELETE_RESULT","Counter","this","ctr","onIncrementCounter","onDecrementCounter","onAdd5Counter","onSubtract5Counter","onStoreResult","storedResults","map","strResult","onDeleteResult","id","Component","connect","state","counter","res","results","dispatch","type","actions","val","result","resultElId","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","initialState","counterReducer","action","resultsReducer","concat","Math","random","updatedArray","filter","rootReducer","combineReducers","store","createStore","applyMiddleware","nxt","getState","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b9712faf.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CounterControl.css';\n\nconst counterControl = (props) => (\n    <div className=\"CounterControl\" onClick={props.clicked}>\n        {props.label}\n    </div>\n);\n\nexport default counterControl;","import React from 'react';\n\nimport './CounterOutput.css';\n\nconst counterOutput = (props) => (\n    <div className=\"CounterOutput\">\n        Current Counter: {props.value}\n    </div>\n);\n\nexport default counterOutput;","export const INCREMENT  = \"INCREMENT\";\nexport const DECREMENT  = \"DECREMENT\";\nexport const ADD5  = \"ADD5\";\nexport const SUBTRACT5  = \"SUBTRACT5\";\nexport const STORE_RESULT  = \"STORE_RESULT\";\nexport const  DELETE_RESULT = \"DELETE_RESULT\";","import React, { Component } from \"react\";\nimport { connect } from  'react-redux';\n\nimport CounterControl from \"../../components/CounterControl/CounterControl\";\nimport CounterOutput from \"../../components/CounterOutput/CounterOutput\";\nimport * as actions from \"../../store/actions\";\nclass Counter extends Component {\n \n\n  render() {\n    return (\n      <div>\n        <CounterOutput value={this.props.ctr} />\n        <CounterControl\n          label=\"Increment\"\n          clicked={this.props.onIncrementCounter}\n        />\n        <CounterControl\n          label=\"Decrement\"\n          clicked={this.props.onDecrementCounter}\n        />\n        <CounterControl\n          label=\"Add 5\"\n          clicked={this.props.onAdd5Counter}\n        />\n        <CounterControl\n          label=\"Subtract 5\"\n          clicked={this.props.onSubtract5Counter}\n        />\n        <button onClick={()=>this.props.onStoreResult(this.props.ctr)}>Store Results</button>\n        <ul>\n          {this.props.storedResults.map(strResult => {\n              return(<li key={strResult.id} onClick={() => this.props.onDeleteResult(strResult.id)}>{strResult.value}</li>)\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    ctr:state.ctr.counter,\n    storedResults:state.res.results\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIncrementCounter : () => dispatch({type: actions.INCREMENT}),\n    onDecrementCounter : () => dispatch({type:actions.DECREMENT}),\n    onAdd5Counter : () => dispatch({type:actions.ADD5, val: 5}),\n    onSubtract5Counter : () => dispatch({type:actions.SUBTRACT5, val: 5}),\n    onStoreResult: (result) => dispatch({type:actions.STORE_RESULT, result:result}),\n    onDeleteResult: (id) => dispatch({type:actions.DELETE_RESULT, resultElId: id})\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n","import React, { Component } from 'react';\n\nimport Counter from './containers/Counter/Counter';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Counter />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actions from '../actions';\n\n\nconst initialState = {\n    counter:0\n}\n\n\nconst counterReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case actions.INCREMENT:\n            return {\n                ...state,\n                counter: state.counter+1\n            };\n        case actions.DECREMENT:\n            return {\n                ...state,\n                counter: state.counter-1\n            }\n        case actions.ADD5:\n            return {\n                ...state,\n                counter: state.counter+action.val\n            };\n        case actions.SUBTRACT5:\n            return {\n                ...state,\n                counter: state.counter-action.val\n            };\n        default:\n            return state\n\n    }\n}\n\nexport default counterReducer;","import * as actions from '../actions';\n\n\nconst initialState = {\n    results:[]\n}\n\n\nconst resultsReducer = (state = initialState, action) => {\n\n    switch(action.type){\n        case actions.STORE_RESULT:\n            return{\n                ...state,\n                results: state.results.concat({id: Math.random(), value: action.result})\n            };\n        case actions.DELETE_RESULT:\n            const updatedArray = state.results.filter(result => {\n               return( result.id !== action.resultElId)});\n            return{\n                ...state,\n                results: updatedArray\n                };\n                default:\n                    return state\n    }\n}\n\nexport default resultsReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport counterReducer from './store/reducers/counter';\nimport resultsReducer from './store/reducers/results';\n\n\nconst rootReducer = combineReducers({\n    ctr: counterReducer,\n    res: resultsReducer\n});\n\nconst logger = store =>{\n    return nxt =>{\n        return action =>{\n            console.log(\"[middleware] Dispaching\",action);\n            const result = nxt(action);\n            console.log(\"[middleware] nextState\",store.getState());\n            return result;\n        }\n    }\n}\n\n\nconst store = createStore(rootReducer, applyMiddleware(logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\nregisterServiceWorker();\n"],"sourceRoot":""}